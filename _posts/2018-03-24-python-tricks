---
layout: post
title: Python Tricks
categories:
  - Programming
tags:
  - Python
last_modified_at: 2018-03-24T11:07:45-05:00
---

## 2D list declaration

A short notation to define and initialize a 2D matrix as a list of list is the following: 

{% highlight python %}
matrix = [[0]*cols for i in range(rows)]
{% endhighlight %}

where **0** is the intialization value for all matrix elements, **cols** is the number of columns and **rows** is the number of rows.
Unfortunately shortening the previous notation as 

{% highlight python %}
[[0]*cols]*rows 
{% endhighlight %}

doesn't work because it creates **rows** copies of the same list of size **cols**, so when an element is modified, all the elements 
belonging to the same column are modified. Indeed if cols = 3, [0]*cols creates a list [0 0 0] with 3 times a reference to the 
same (immutable) object representing the number 0. Consequently, [[0]*cols]*rows creates **rows** references to the same list [0 0 0]
and any change to an element of a list is propagated through all references. The change doesn't propagate internally to each list, 
because the list objects are immutable.
