---
layout: post
title: "Overloading Input/Output Operators in C++"
categories:
  - C++
tags:
  - C++
  - overloading
last_modified_at: 2017-11-14T10:55:59-05:00
---

Operator overloading is just another way to make a function call. The main difference is that the arguments of the function are not inside
parenthesis, but they surround the function or are next to the function. The definition of these function is done using the keyword operator
followed by the operator itself. Usually, the operators may be members or non-members of a class, and it doesnâ€™t seem to make much 
difference. An exception is when the operators << and >> are overloaded for iostreams. In this particular case, the first parameter is a stream
and not an object of the class where the stream operator is defined. 

{% highlight cpp %}  
  
class Date  
{  
    int day, month, year;  
public:  
    Date(int d, int m, int y)  
    {  
        month = m; day = d; year = y;  
    }  
    friend std::ostream& operator<<(std::ostream& os, const Date& dt);  
};  
  
std::ostream& operator<<(std::ostream& os, const Date& date)  
{  
    os << date.day << '/' << date.month << '/' << date.year;  
    return os;  
}  
  
int main()  
{  
    Date date(17, 06, 2001);  
    cout << dt;  
}  

Here, it is important to make operator overloading function a friend of the class because it would be called without creating an object. The overloaded << operator function must then be declared as a friend of class Date so it can access the private data within a Date object.

The stream operators:

operator << output
operator >> input
When you use these as stream operators (rather than binary shift) the first parameter is a stream. Since you do not have access to the stream object (its not yours to modify) these can not be member operators they have to be external to the class. Thus they must either be friends of the class or have access to a public method that will do the streaming for you.

It is also traditional for these objects to return a reference to a stream object so you can chain stream operations together.
