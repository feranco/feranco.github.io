---
layout: post
title: "Overloading Input/Output Operators in C++"
categories:
  - C++
tags:
  - C++
  - overloading
last_modified_at: 2017-11-14T10:55:59-05:00
---

Operator overloading is just another way to make a function call. The main difference is that the arguments of the function are not inside
parenthesis, but they surround the function or are next to the function. The definition of these function is done using the keyword operator
followed by the operator itself. Usually, the operators may be members or non-members of a class without any difference. An exception is when 
the operators << and >> are overloaded for iostreams. Since the first argument of these operators is a stream and not an object of the class 
for which the operators are defined, the stream operators can not be member operators but have to be external to the class. As any non member operator, 
the overloaded operators << and >> must be declared as a friend of the class so that they can access the private data. It is also traditional for these 
operators to return a reference to a stream object so that it is possible to concatenate stream operations together.

{% highlight cpp %}  
  
class Date  
{  
    int day, month, year;  
public:  
    Date(int d, int m, int y)  
    {  
        month = m; day = d; year = y;  
    }  
    
    friend std::ostream& operator<<(std::ostream& os, const Date& dt);  
    friend std::istream& operator<<(std::istream& os, Date& dt);
};  
  
std::ostream& operator<<(std::ostream& os, const Date& date)  
{  
    os << date.day << '/' << date.month << '/' << date.year;  
    return os;  
}  

std::istream& operator>> (std::istream& is, Date& date)  
{  
    is >> date.day >> date.month >> date.year;  
    return is;  
}  
  
int main()  
{  
    Date date(17, 06, 2001);  
    cout << dt;  
}  

{% endhighlight %}


